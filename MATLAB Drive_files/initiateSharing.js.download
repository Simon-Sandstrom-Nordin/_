define([
  "underscore",
  "widgets/abstractWidget",
  "InitiateSharingView"
], function(_, AbstractWidget, InitiateSharingView) {
  var InitiateSharingWidget = function(args) {
    var initializeArgs = {
      widgetName: "initiatesharing",
      embeddedCore: (args && (typeof args === "object") && args.embeddedCore) ? args.embeddedCore : null,
      apsType: "FILES"
    };
    this.initialize(initializeArgs);
  };
  InitiateSharingWidget.prototype = Object.create(AbstractWidget.prototype);
  InitiateSharingWidget.prototype.constructor = InitiateSharingWidget;
  InitiateSharingWidget.prototype.initialize = function(args) {
    // super
    Object.getPrototypeOf(InitiateSharingWidget.prototype).initialize.call(this, args);
    _.bindAll(this, "getInstance");
  };
  /*
   *  List the contents of the folder path specified in configOptions.folderPath,
   *  if any.  If the folder path is not specified then the root folder "/" is
   *  used.  When this method is called without a sessionId (e.g. when used as
   *  the "src" value in a iframe), a message of "folderpathcontents" is posted
   *  to the parent window.  It's a signal that the app is loaded.  If the
   *  embedding page then posts another message with the "configOptions" and
   *  "sessionId" values specified, we render the widget using data associated
   *  with that sessionID.
   */
  InitiateSharingWidget.prototype.getInstance = function(containerId, sessionId, configOptions) {
    containerId = containerId || "";
    configOptions = configOptions || {};
    var context = this;
    var embeddedWidgetName = this.getName();
    var disposibleElement;
    var isv;
    // super
    Object.getPrototypeOf(InitiateSharingWidget.prototype).getInstance.call(this, containerId, sessionId, configOptions);
    if (sessionId) {
      configOptions.isEmbedded = true;
      configOptions.embeddedName = embeddedWidgetName;
      configOptions.editPermissionsEnabled = this.getEmbeddedCore().isEditPermissionsEnabled();
      configOptions.personalInvitationsEnabled = this.getEmbeddedCore().isPersonalInvitationsEnabled();
      isv = new InitiateSharingView(configOptions);
      this.setController(isv);
      isv.fileService.gdsDAO.setSessionId(sessionId);
      disposibleElement = document.createElement('div');
      this.getWidgetContainer().append(disposibleElement);
      isv.setElement(disposibleElement);
      isv.setEmbeddedContainerId(containerId);
      isv.setEmbeddedClientHost(this.getEmbeddedCore().getClientHost());
      isv.$el.on("show.bs.modal", function() {
        $('#embeddedWidgetContainer.embeddedWidget > .horizontalIconContainer').hide();
      });
      isv.$el.on("hidden.bs.modal", function() {
        // only logout if we gnerated the GDS session because that means we're managing it.
        if (context.getEmbeddedCore().isSessionIdGenerated()) {
          context.getEmbeddedCore().logout(isv);
        }
        $('#embeddedWidgetContainer.embeddedWidget > .horizontalIconContainer').show();
        window.parent.postMessage(JSON.stringify({ name: "widgetclosed:" + embeddedWidgetName + ":" + containerId }), context.getEmbeddedCore().getClientHost());
        context.setController(null);
      });
      this.getController().render();
    } else {
      // signal we are ready
      window.parent.postMessage(JSON.stringify({ name: "widgetinit:" + embeddedWidgetName + ":" + containerId }), this.getEmbeddedCore().getClientHost());
    }
  };

  InitiateSharingWidget.prototype.setOriginId = function(originId) {
    this.getController().fileService.gdsDAO.setOriginId(originId);
  };

  InitiateSharingWidget.prototype.setClientString = function(clientString) {
    if (clientString && typeof clientString !== "string") {
      throw new TypeError("Invalid clientString");
    }
    this.getController().fileService.gdsDAO.setClientString(clientString);
  };

  InitiateSharingWidget.prototype.setGdsClientType = function(gdsClientType) {
    if (gdsClientType && typeof gdsClientType !== "string") {
      throw new TypeError("Invalid gdsClientType");
    }
    this.getController().fileService.gdsDAO.setGdsClientType(gdsClientType);
  };

  return InitiateSharingWidget;
});
