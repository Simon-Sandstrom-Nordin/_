define([
  "dojo/_base/declare",
  "mw-filebrowser/actions/Action",
  "dojo/i18n!nls/mldoStringResource"
], function (declare, Action, MLDOStrings) {
  return declare(Action, {
    constructor: function (args) {
      args = args || {};
      var context = args.context;
      var makeActionAvailable = args.showAction || false;
      this.name =  MLDOStrings.previewPageAddToDriveLabel;
      this.enabled = makeActionAvailable;
      this.label = MLDOStrings.previewPageAddToDriveLabel;
      this.getInvitationDetailsMethod = args.getInvitationDetailsMethod;
      this.id = "addShortcutAction";
      this.section = {
        id: "shareAddToDrive",
        enabled: false,
        isApplicableTo: function() { return false; },
        label: "sub1",
        parent: {
          id: "mldoAddToDriveAction",
          name: MLDOStrings.previewPageAddLabel,
          label: MLDOStrings.previewPageAddLabel,
          allowSubMenu: true,
          forceSubMenu: true
        }
      };
      this.isApplicableTo = function () {
        let invitationStatus;
        if (this.getInvitationDetailsMethod && typeof this.getInvitationDetailsMethod === "function" && this.getInvitationDetailsMethod()) {
          invitationStatus = this.getInvitationDetailsMethod().invitationStatus;
        }
        if (invitationStatus === "ACCEPTED") {
          this.enabled = false;
        } else {
          this.enabled =  makeActionAvailable && true;
        }
        return this.enabled;
      };
      this.callback = function () {
        let invitationDetails;
        if (this.getInvitationDetailsMethod && typeof this.getInvitationDetailsMethod === "function" && this.getInvitationDetailsMethod()) {
          invitationDetails = this.getInvitationDetailsMethod();
        }
        if (invitationDetails && typeof invitationDetails === "object") {
          context.handleAddToDriveAction(invitationDetails.invitationId, invitationDetails.authenticated);
        }
      };
    }
  });

});