define([
    "dojo/_base/declare",
    "mw-filebrowser/actions/Action",
    "mw-keybindings/DefaultKeys",
    "dojo/keys",
    "mw-filename-utils/FileNameUtil",
    "util",
    "dojo/i18n!nls/mldoStringResource",
    "dojo/string"
], function (declare, Action, DefaultKeys, keys, FileNameUtil, Util, MLDOStrings) {
  return declare(Action, {
    constructor: function (args) {
      args = args || {};
      var context = args.context;
      var makeActionAvailable = args.showAction || false;
      this.name = "moveToAction";
      this.label = MLDOStrings.contextMenuMoveLabel;
      this.moveEnabled = args.moveEnabled || false;
      this.enabled = makeActionAvailable;

      this.section = {
        id: "MISC",
        name: "MISC",
        allowSubMenu: false,
        forceSubMenu: false
      };
      this.shortcut = "Ctrl + X";
      this.keyCode = DefaultKeys.X;
      this.requiresCtrl = true;
      this.supportsKeyBinding = true;
      this.isApplicableTo = function (path) {
        var selectedFileCount = context.getSelectedRowCount();
        var parentWritable = true;
        if (selectedFileCount < 1) {
          this.enabled = false;
        } else {
          var fileInfos = context.getSelectedItemFileInfos();
          for (var i = 0; i < fileInfos.length; i++) {
            fileInfo = fileInfos[i];
            if (!fileInfo.filePermissions.parentCanWrite) {
              parentWritable = false;
            }
          }
          this.enabled = makeActionAvailable && parentWritable && FileNameUtil.isFileInfo(fileInfo);
        }
        if (!this.moveEnabled) {
          return false;
        }
        return this.enabled;
      };
      this.callback = function (action) {
        if (this.moveEnabled) {
          var fileInfos = context.getSelectedItemFileInfos();
          var sortedFileInfos = Util.sortFileInfosByPath(fileInfos);
          var fileInfo = fileInfos[0];
          if (this.isApplicableTo(fileInfo)) {
            var path = FileNameUtil.pathFromFileInfo(fileInfo);
            var currentFolder = context.getCurrentFolder();
            if (currentFolder !== "/" && path) {
              path = currentFolder + path;
            }
            var fullPathFileInfo = null;
            if (!fileInfo) {
              fullPathFileInfo = FileNameUtil.folderInfoFromPath(path);
            } else {
              if (fileInfo.isDirectory) {
                fullPathFileInfo = FileNameUtil.folderInfoFromPath(path);
              } else {
                fullPathFileInfo = FileNameUtil.fileInfoFromPath(path);
              }
            }
            if (fullPathFileInfo && fullPathFileInfo.location && fullPathFileInfo.name) {
              fullPathFileInfo.path = fullPathFileInfo.location + fullPathFileInfo.name;
              fullPathFileInfo.parent = FileNameUtil.getParentPath(fullPathFileInfo.path);
            }
            if (fileInfos.length === 1 && fileInfo && fullPathFileInfo) {
              context.handleMoveOrCopy(fullPathFileInfo, "move");
            } else if (fileInfos.length > 1) {
              context.handleMultiSelectMoveOrCopy(sortedFileInfos, "move");
            }
          }
        }
      };
    }
  });
});
