define([
    "dojo/_base/declare",
    "dgrid/editor",
    "dgrid/tree",
    "dijit/form/ValidationTextBox",
    "mw-filebrowser/columns/helpers/FileIconUtils",
    "mw-filebrowser/columns/helpers/NameComparator",
    "dojo/i18n!nls/mldoStringResource",
    "dojo/string"
], function (declare, editor, tree, ValidationTextBox, FileIconUtils, NameComparator, MLDOStrings, DojoString) {
    return declare([], {
      constructor: function (args) {
          args = args || {};
          this.column = {
              id: "tombstoneColumn",
              label: MLDOStrings.tombstoneColumnLabel,
              renderHeaderCell: function (th) {
                if (!th || !th.appendChild || typeof th.appendChild !== "function") {
                  throw new TypeError("Invalid th argument");
                }
                var tombstoneColumn = document.createElement("div");
                tombstoneColumn.className = "columnHeaderLabel";
                var labelNode = document.createTextNode(MLDOStrings.tombstoneColumnLabel);
                tombstoneColumn.appendChild(labelNode);
                th.appendChild(tombstoneColumn);
              },
              field: "tombstone",
              get: function (fileInfo) {
                if (!fileInfo || !fileInfo.tombstoneId) {
                  throw new TypeError("Invalid fileInfo argument");
                }
                return fileInfo.tombstoneId;
              },
              sortable: true,
              sort: function (a, b) {
                if (!a || typeof a !== "object") {
                  throw new TypeError("Invalid a argument");
                }
                if (!b || typeof b !== "object") {
                  throw new TypeError("Invalid b argument");
                }
                if (a.tombstoneId === b.tombstoneId) {
                    return NameComparator.caseSensitiveStringComparator(a.name, b.name);
                } else {
                    return NameComparator.caseSensitiveStringComparator(a.tombstoneId, b.tombstoneId);
                }
              },
              hidden: true,
              unhidable: true,
          };
      }
    });
});
